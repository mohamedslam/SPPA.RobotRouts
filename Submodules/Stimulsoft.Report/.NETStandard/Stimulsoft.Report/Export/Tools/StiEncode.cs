#region Copyright (C) 2003-2022 Stimulsoft
/*
{*******************************************************************}
{																	}
{	Stimulsoft Reports												}
{	                         										}
{																	}
{	Copyright (C) 2003-2022 Stimulsoft     							}
{	ALL RIGHTS RESERVED												}
{																	}
{	The entire contents of this file is protected by U.S. and		}
{	International Copyright Laws. Unauthorized reproduction,		}
{	reverse-engineering, and distribution of all or any portion of	}
{	the code contained in this file is strictly prohibited and may	}
{	result in severe civil and criminal penalties and will be		}
{	prosecuted to the maximum extent possible under the law.		}
{																	}
{	RESTRICTIONS													}
{																	}
{	THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES			}
{	ARE CONFIDENTIAL AND PROPRIETARY								}
{	TRADE SECRETS OF Stimulsoft										}
{																	}
{	CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON		}
{	ADDITIONAL RESTRICTIONS.										}
{																	}
{*******************************************************************}
*/
#endregion Copyright (C) 2003-2022 Stimulsoft

using System.Text;

namespace Stimulsoft.Report.Export
{
	public class StiEncode
	{
		public static byte[] unicodeToCodePageArray = new byte[65536];
		public static byte[] unicodeToAnsiArray = new byte[65536];

		private static int[,] codePagesDataTable;
		private const int codePagesCount = 9;

		public static int[,] codePagesTable;
		public const int codePagesTableSize = 9;
		
		public static StringBuilder Encode(StringBuilder sb, int codepage)
		{
			var outputSB = new StringBuilder();
			for (int index = 0; index < sb.Length; index++)
			{
				int sym = (int)sb[index];
				int symb = 0x003f;
				int cpDest = unicodeToCodePageArray[sym];
			    if ((cpDest == codepage && cpDest != 1) || (cpDest == 0))
			        symb = unicodeToAnsiArray[sym];

			    outputSB.Append((char)symb);
			}
			return outputSB;
		}

		static StiEncode()
		{
			#region prepare codePages table
			codePagesTable = new[,]
			{
				// langid, codepage, charset
				{0x409, 1252,   1},
				{0x419, 1251, 204},
				{0x415, 1250, 238},
				{0x408, 1253, 161},
				{0x41F, 1254, 162},
				{0x40D, 1255, 177},
				{0x401, 1256, 178},
				{0x425, 1257, 186},
				{0x42A, 1258, 163},
				//				{0x41E,  874, 222},
				//				{0x411,  932, 128},
				//				{0x804,  936, 134},
				//				{0x412,  949, 129},
				//				{0x404,  950, 136}
			};
			#endregion

			#region prepare codePages to Unicode conversion table
			codePagesDataTable = new[,] 
			{
				// 1252,   1251,   1250,   1253,   1254,   1255,   1256,   1257,   1258
				{0x20AC, 0x0402, 0x20AC, 0x20AC, 0x20AC, 0x20AC, 0x20AC, 0x20AC, 0x20AC},
				{0x0000, 0x0403, 0x0000, 0x0000, 0x0000, 0x0000, 0x067E, 0x0000, 0x0000},
				{0x201A, 0x201A, 0x201A, 0x201A, 0x201A, 0x201A, 0x201A, 0x201A, 0x201A},
				{0x0192, 0x0453, 0x0000, 0x0192, 0x0192, 0x0192, 0x0192, 0x0000, 0x0192},
				{0x201E, 0x201E, 0x201E, 0x201E, 0x201E, 0x201E, 0x201E, 0x201E, 0x201E},
				{0x2026, 0x2026, 0x2026, 0x2026, 0x2026, 0x2026, 0x2026, 0x2026, 0x2026},
				{0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020},
				{0x2021, 0x2021, 0x2021, 0x2021, 0x2021, 0x2021, 0x2021, 0x2021, 0x2021},
				{0x02C6, 0x20AC, 0x0000, 0x0000, 0x02C6, 0x02C6, 0x02C6, 0x0000, 0x02C6},
				{0x2030, 0x2030, 0x2030, 0x2030, 0x2030, 0x2030, 0x2030, 0x2030, 0x2030},
				{0x0160, 0x0409, 0x0160, 0x0000, 0x0160, 0x0000, 0x0679, 0x0000, 0x0000},
				{0x2039, 0x2039, 0x2039, 0x2039, 0x2039, 0x2039, 0x2039, 0x2039, 0x2039},
				{0x0152, 0x040A, 0x015A, 0x0000, 0x0152, 0x0000, 0x0152, 0x0000, 0x0152},
				{0x0000, 0x040C, 0x0164, 0x0000, 0x0000, 0x0000, 0x0686, 0x00A8, 0x0000},
				{0x017D, 0x040B, 0x017D, 0x0000, 0x0000, 0x0000, 0x0698, 0x02C7, 0x0000},
				{0x0000, 0x040F, 0x0179, 0x0000, 0x0000, 0x0000, 0x0688, 0x00B8, 0x0000},
				{0x0000, 0x0452, 0x0000, 0x0000, 0x0000, 0x0000, 0x06AF, 0x0000, 0x0000},
				{0x2018, 0x2018, 0x2018, 0x2018, 0x2018, 0x2018, 0x2018, 0x2018, 0x2018},
				{0x2019, 0x2019, 0x2019, 0x2019, 0x2019, 0x2019, 0x2019, 0x2019, 0x2019},
				{0x201C, 0x201C, 0x201C, 0x201C, 0x201C, 0x201C, 0x201C, 0x201C, 0x201C},
				{0x201D, 0x201D, 0x201D, 0x201D, 0x201D, 0x201D, 0x201D, 0x201D, 0x201D},
				{0x2022, 0x2022, 0x2022, 0x2022, 0x2022, 0x2022, 0x2022, 0x2022, 0x2022},
				{0x2013, 0x2013, 0x2013, 0x2013, 0x2013, 0x2013, 0x2013, 0x2013, 0x2013},
				{0x2014, 0x2014, 0x2014, 0x2014, 0x2014, 0x2014, 0x2014, 0x2014, 0x2014},
				{0x02DC, 0x0000, 0x0000, 0x0000, 0x02DC, 0x02DC, 0x06A9, 0x0000, 0x02DC},
				{0x2122, 0x2122, 0x2122, 0x2122, 0x2122, 0x2122, 0x2122, 0x2122, 0x2122},
				{0x0161, 0x0459, 0x0161, 0x0000, 0x0161, 0x0000, 0x0691, 0x0000, 0x0000},
				{0x203A, 0x203A, 0x203A, 0x203A, 0x203A, 0x203A, 0x203A, 0x203A, 0x203A},
				{0x0153, 0x045A, 0x015B, 0x0000, 0x0153, 0x0000, 0x0153, 0x0000, 0x0153},
				{0x0000, 0x045C, 0x0165, 0x0000, 0x0000, 0x0000, 0x200C, 0x00AF, 0x0000},
				{0x017E, 0x045B, 0x017E, 0x0000, 0x0000, 0x0000, 0x200D, 0x02DB, 0x0000},
				{0x0178, 0x045F, 0x017A, 0x0000, 0x0178, 0x0000, 0x06BA, 0x0000, 0x0178},
				{0x00A0, 0x00A0, 0x00A0, 0x00A0, 0x00A0, 0x00A0, 0x00A0, 0x00A0, 0x00A0},
				{0x00A1, 0x040E, 0x02C7, 0x0385, 0x00A1, 0x00A1, 0x060C, 0x0000, 0x00A1},
				{0x00A2, 0x045E, 0x02D8, 0x0386, 0x00A2, 0x00A2, 0x00A2, 0x00A2, 0x00A2},
				{0x00A3, 0x0408, 0x0141, 0x00A3, 0x00A3, 0x00A3, 0x00A3, 0x00A3, 0x00A3},
				{0x00A4, 0x00A4, 0x00A4, 0x00A4, 0x00A4, 0x20AA, 0x00A4, 0x00A4, 0x00A4},
				{0x00A5, 0x0490, 0x0104, 0x00A5, 0x00A5, 0x00A5, 0x00A5, 0x0000, 0x00A5},
				{0x00A6, 0x00A6, 0x00A6, 0x00A6, 0x00A6, 0x00A6, 0x00A6, 0x00A6, 0x00A6},
				{0x00A7, 0x00A7, 0x00A7, 0x00A7, 0x00A7, 0x00A7, 0x00A7, 0x00A7, 0x00A7},
				{0x00A8, 0x0401, 0x00A8, 0x00A8, 0x00A8, 0x00A8, 0x00A8, 0x00D8, 0x00A8},
				{0x00A9, 0x00A9, 0x00A9, 0x00A9, 0x00A9, 0x00A9, 0x00A9, 0x00A9, 0x00A9},
				{0x00AA, 0x0404, 0x015E, 0x0000, 0x00AA, 0x00D7, 0x06BE, 0x0156, 0x00AA},
				{0x00AB, 0x00AB, 0x00AB, 0x00AB, 0x00AB, 0x00AB, 0x00AB, 0x00AB, 0x00AB},
				{0x00AC, 0x00AC, 0x00AC, 0x00AC, 0x00AC, 0x00AC, 0x00AC, 0x00AC, 0x00AC},
				{0x00AD, 0x00AD, 0x00AD, 0x00AD, 0x00AD, 0x00AD, 0x00AD, 0x00AD, 0x00AD},
				{0x00AE, 0x00AE, 0x00AE, 0x00AE, 0x00AE, 0x00AE, 0x00AE, 0x00AE, 0x00AE},
				{0x00AF, 0x0407, 0x017B, 0x2015, 0x00AF, 0x00AF, 0x00AF, 0x00C6, 0x00AF},
				{0x00B0, 0x00B0, 0x00B0, 0x00B0, 0x00B0, 0x00B0, 0x00B0, 0x00B0, 0x00B0},
				{0x00B1, 0x00B1, 0x00B1, 0x00B1, 0x00B1, 0x00B1, 0x00B1, 0x00B1, 0x00B1},
				{0x00B2, 0x0406, 0x02DB, 0x00B2, 0x00B2, 0x00B2, 0x00B2, 0x00B2, 0x00B2},
				{0x00B3, 0x0456, 0x0142, 0x00B3, 0x00B3, 0x00B3, 0x00B3, 0x00B3, 0x00B3},
				{0x00B4, 0x0491, 0x00B4, 0x0384, 0x00B4, 0x00B4, 0x00B4, 0x00B4, 0x00B4},
				{0x00B5, 0x00B5, 0x00B5, 0x00B5, 0x00B5, 0x00B5, 0x00B5, 0x00B5, 0x00B5},
				{0x00B6, 0x00B6, 0x00B6, 0x00B6, 0x00B6, 0x00B6, 0x00B6, 0x00B6, 0x00B6},
				{0x00B7, 0x00B7, 0x00B7, 0x00B7, 0x00B7, 0x00B7, 0x00B7, 0x00B7, 0x00B7},
				{0x00B8, 0x0451, 0x00B8, 0x0388, 0x00B8, 0x00B8, 0x00B8, 0x00F8, 0x00B8},
				{0x00B9, 0x2116, 0x0105, 0x0389, 0x00B9, 0x00B9, 0x00B9, 0x00B9, 0x00B9},
				{0x00BA, 0x0454, 0x015F, 0x038A, 0x00BA, 0x00F7, 0x061B, 0x0157, 0x00BA},
				{0x00BB, 0x00BB, 0x00BB, 0x00BB, 0x00BB, 0x00BB, 0x00BB, 0x00BB, 0x00BB},
				{0x00BC, 0x0458, 0x013D, 0x038C, 0x00BC, 0x00BC, 0x00BC, 0x00BC, 0x00BC},
				{0x00BD, 0x0405, 0x02DD, 0x00BD, 0x00BD, 0x00BD, 0x00BD, 0x00BD, 0x00BD},
				{0x00BE, 0x0455, 0x013E, 0x038E, 0x00BE, 0x00BE, 0x00BE, 0x00BE, 0x00BE},
				{0x00BF, 0x0457, 0x017C, 0x038F, 0x00BF, 0x00BF, 0x061F, 0x00E6, 0x00BF},
				{0x00C0, 0x0410, 0x0154, 0x0390, 0x00C0, 0x05B0, 0x06C1, 0x0104, 0x00C0},
				{0x00C1, 0x0411, 0x00C1, 0x0391, 0x00C1, 0x05B1, 0x0621, 0x012E, 0x00C1},
				{0x00C2, 0x0412, 0x00C2, 0x0392, 0x00C2, 0x05B2, 0x0622, 0x0100, 0x00C2},
				{0x00C3, 0x0413, 0x0102, 0x0393, 0x00C3, 0x05B3, 0x0623, 0x0106, 0x0102},
				{0x00C4, 0x0414, 0x00C4, 0x0394, 0x00C4, 0x05B4, 0x0624, 0x00C4, 0x00C4},
				{0x00C5, 0x0415, 0x0139, 0x0395, 0x00C5, 0x05B5, 0x0625, 0x00C5, 0x00C5},
				{0x00C6, 0x0416, 0x0106, 0x0396, 0x00C6, 0x05B6, 0x0626, 0x0118, 0x00C6},
				{0x00C7, 0x0417, 0x00C7, 0x0397, 0x00C7, 0x05B7, 0x0627, 0x0112, 0x00C7},
				{0x00C8, 0x0418, 0x010C, 0x0398, 0x00C8, 0x05B8, 0x0628, 0x010C, 0x00C8},
				{0x00C9, 0x0419, 0x00C9, 0x0399, 0x00C9, 0x05B9, 0x0629, 0x00C9, 0x00C9},
				{0x00CA, 0x041A, 0x0118, 0x039A, 0x00CA, 0x0000, 0x062A, 0x0179, 0x00CA},
				{0x00CB, 0x041B, 0x00CB, 0x039B, 0x00CB, 0x05BB, 0x062B, 0x0116, 0x00CB},
				{0x00CC, 0x041C, 0x011A, 0x039C, 0x00CC, 0x05BC, 0x062C, 0x0122, 0x0300},
				{0x00CD, 0x041D, 0x00CD, 0x039D, 0x00CD, 0x05BD, 0x062D, 0x0136, 0x00CD},
				{0x00CE, 0x041E, 0x00CE, 0x039E, 0x00CE, 0x05BE, 0x062E, 0x012A, 0x00CE},
				{0x00CF, 0x041F, 0x010E, 0x039F, 0x00CF, 0x05BF, 0x062F, 0x013B, 0x00CF},
				{0x00D0, 0x0420, 0x0110, 0x03A0, 0x011E, 0x05C0, 0x0630, 0x0160, 0x0110},
				{0x00D1, 0x0421, 0x0143, 0x03A1, 0x00D1, 0x05C1, 0x0631, 0x0143, 0x00D1},
				{0x00D2, 0x0422, 0x0147, 0x0000, 0x00D2, 0x05C2, 0x0632, 0x0145, 0x0309},
				{0x00D3, 0x0423, 0x00D3, 0x03A3, 0x00D3, 0x05C3, 0x0633, 0x00D3, 0x00D3},
				{0x00D4, 0x0424, 0x00D4, 0x03A4, 0x00D4, 0x05F0, 0x0634, 0x014C, 0x00D4},
				{0x00D5, 0x0425, 0x0150, 0x03A5, 0x00D5, 0x05F1, 0x0635, 0x00D5, 0x01A0},
				{0x00D6, 0x0426, 0x00D6, 0x03A6, 0x00D6, 0x05F2, 0x0636, 0x00D6, 0x00D6},
				{0x00D7, 0x0427, 0x00D7, 0x03A7, 0x00D7, 0x05F3, 0x00D7, 0x00D7, 0x00D7},
				{0x00D8, 0x0428, 0x0158, 0x03A8, 0x00D8, 0x05F4, 0x0637, 0x0172, 0x00D8},
				{0x00D9, 0x0429, 0x016E, 0x03A9, 0x00D9, 0x0000, 0x0638, 0x0141, 0x00D9},
				{0x00DA, 0x042A, 0x00DA, 0x03AA, 0x00DA, 0x0000, 0x0639, 0x015A, 0x00DA},
				{0x00DB, 0x042B, 0x0170, 0x03AB, 0x00DB, 0x0000, 0x063A, 0x016A, 0x00DB},
				{0x00DC, 0x042C, 0x00DC, 0x03AC, 0x00DC, 0x0000, 0x0640, 0x00DC, 0x00DC},
				{0x00DD, 0x042D, 0x00DD, 0x03AD, 0x0130, 0x0000, 0x0641, 0x017B, 0x01AF},
				{0x00DE, 0x042E, 0x0162, 0x03AE, 0x015E, 0x0000, 0x0642, 0x017D, 0x0303},
				{0x00DF, 0x042F, 0x00DF, 0x03AF, 0x00DF, 0x0000, 0x0643, 0x00DF, 0x00DF},
				{0x00E0, 0x0430, 0x0155, 0x03B0, 0x00E0, 0x05D0, 0x00E0, 0x0105, 0x00E0},
				{0x00E1, 0x0431, 0x00E1, 0x03B1, 0x00E1, 0x05D1, 0x0644, 0x012F, 0x00E1},
				{0x00E2, 0x0432, 0x00E2, 0x03B2, 0x00E2, 0x05D2, 0x00E2, 0x0101, 0x00E2},
				{0x00E3, 0x0433, 0x0103, 0x03B3, 0x00E3, 0x05D3, 0x0645, 0x0107, 0x0103},
				{0x00E4, 0x0434, 0x00E4, 0x03B4, 0x00E4, 0x05D4, 0x0646, 0x00E4, 0x00E4},
				{0x00E5, 0x0435, 0x013A, 0x03B5, 0x00E5, 0x05D5, 0x0647, 0x00E5, 0x00E5},
				{0x00E6, 0x0436, 0x0107, 0x03B6, 0x00E6, 0x05D6, 0x0648, 0x0119, 0x00E6},
				{0x00E7, 0x0437, 0x00E7, 0x03B7, 0x00E7, 0x05D7, 0x00E7, 0x0113, 0x00E7},
				{0x00E8, 0x0438, 0x010D, 0x03B8, 0x00E8, 0x05D8, 0x00E8, 0x010D, 0x00E8},
				{0x00E9, 0x0439, 0x00E9, 0x03B9, 0x00E9, 0x05D9, 0x00E9, 0x00E9, 0x00E9},
				{0x00EA, 0x043A, 0x0119, 0x03BA, 0x00EA, 0x05DA, 0x00EA, 0x017A, 0x00EA},
				{0x00EB, 0x043B, 0x00EB, 0x03BB, 0x00EB, 0x05DB, 0x00EB, 0x0117, 0x00EB},
				{0x00EC, 0x043C, 0x011B, 0x03BC, 0x00EC, 0x05DC, 0x0649, 0x0123, 0x0301},
				{0x00ED, 0x043D, 0x00ED, 0x03BD, 0x00ED, 0x05DD, 0x064A, 0x0137, 0x00ED},
				{0x00EE, 0x043E, 0x00EE, 0x03BE, 0x00EE, 0x05DE, 0x00EE, 0x012B, 0x00EE},
				{0x00EF, 0x043F, 0x010F, 0x03BF, 0x00EF, 0x05DF, 0x00EF, 0x013C, 0x00EF},
				{0x00F0, 0x0440, 0x0111, 0x03C0, 0x011F, 0x05E0, 0x064B, 0x0161, 0x0111},
				{0x00F1, 0x0441, 0x0144, 0x03C1, 0x00F1, 0x05E1, 0x064C, 0x0144, 0x00F1},
				{0x00F2, 0x0442, 0x0148, 0x03C2, 0x00F2, 0x05E2, 0x064D, 0x0146, 0x0323},
				{0x00F3, 0x0443, 0x00F3, 0x03C3, 0x00F3, 0x05E3, 0x064E, 0x00F3, 0x00F3},
				{0x00F4, 0x0444, 0x00F4, 0x03C4, 0x00F4, 0x05E4, 0x00F4, 0x014D, 0x00F4},
				{0x00F5, 0x0445, 0x0151, 0x03C5, 0x00F5, 0x05E5, 0x064F, 0x00F5, 0x01A1},
				{0x00F6, 0x0446, 0x00F6, 0x03C6, 0x00F6, 0x05E6, 0x0650, 0x00F6, 0x00F6},
				{0x00F7, 0x0447, 0x00F7, 0x03C7, 0x00F7, 0x05E7, 0x00F7, 0x00F7, 0x00F7},
				{0x00F8, 0x0448, 0x0159, 0x03C8, 0x00F8, 0x05E8, 0x0651, 0x0173, 0x00F8},
				{0x00F9, 0x0449, 0x016F, 0x03C9, 0x00F9, 0x05E9, 0x00F9, 0x0142, 0x00F9},
				{0x00FA, 0x044A, 0x00FA, 0x03CA, 0x00FA, 0x05EA, 0x0652, 0x015B, 0x00FA},
				{0x00FB, 0x044B, 0x0171, 0x03CB, 0x00FB, 0x0000, 0x00FB, 0x016B, 0x00FB},
				{0x00FC, 0x044C, 0x00FC, 0x03CC, 0x00FC, 0x0000, 0x00FC, 0x00FC, 0x00FC},
				{0x00FD, 0x044D, 0x00FD, 0x03CD, 0x0131, 0x200E, 0x200E, 0x017C, 0x01B0},
				{0x00FE, 0x044E, 0x0163, 0x03CE, 0x015F, 0x200F, 0x200F, 0x017E, 0x20AB},
				{0x00FF, 0x044F, 0x02D9, 0x0000, 0x00FF, 0x0000, 0x06D2, 0x02D9, 0x00FF}
			};
			#endregion

			#region clear Unicode Arrays
			for (int index = 0; index < 128; index++)
			{
				unicodeToCodePageArray[index] = 0;
				unicodeToAnsiArray[index] = (byte)index;
			}
			for (int index = 128; index < 65536; index++)
			{
				unicodeToCodePageArray[index] = 0;
				unicodeToAnsiArray[index] = 63;
			}
			#endregion

			#region make conversion table using system routines
			Encoding tempEnc;
			StringBuilder sbConv = new StringBuilder();
			for (int tempIndex = 0; tempIndex < 65536; tempIndex++)
			{
				sbConv.Append((char)tempIndex);
			}
			for	(byte indexCP = codePagesTableSize; indexCP > 0; indexCP--)
			{
				tempEnc = Encoding.GetEncoding(codePagesTable[indexCP - 1, 1]);
				byte[] bb = tempEnc.GetBytes(sbConv.ToString());
				for (int tempIndex = 128; tempIndex < 65536; tempIndex++)
				{
					if (bb[tempIndex] > 127)
					{
						unicodeToCodePageArray[tempIndex] = indexCP;
						unicodeToAnsiArray[tempIndex] = bb[tempIndex];
					}
					else
					{
						if ((bb[tempIndex] != 63) && 
							((unicodeToCodePageArray[tempIndex] == 0) || (unicodeToCodePageArray[tempIndex] > 127)))
						{
							unicodeToCodePageArray[tempIndex] = (byte)(indexCP + 128);
							unicodeToAnsiArray[tempIndex] = bb[tempIndex];
						}
					}	
				}
			}
			for (int tempIndex = 128; tempIndex < 65536; tempIndex++)
			{
				if (unicodeToCodePageArray[tempIndex] > 127)
				{
					unicodeToCodePageArray[tempIndex] -= 128;
				}
			}
			#endregion

			#region replace conversion table using prepared table
			//windows may not have all codepage tables, but can convert all to nearest symbols.
			//prepared table add all codepages
			for (int index = codePagesCount; index > 0; index--)
			{
				for (int index2 = 0; index2 < 128; index2++)
				{
					int unicodeChar = codePagesDataTable[index2, index - 1];
					unicodeToCodePageArray[unicodeChar] = (byte)index;
					unicodeToAnsiArray[unicodeChar] = (byte)(index2 + 128);
				}
			}
			#endregion

			#region Correct arabic digits
			for (int index = 0; index < 10; index++)
			{
				unicodeToCodePageArray[index + 0x0660] = 0;
				unicodeToAnsiArray[index + 0x0660] = 63;
				unicodeToCodePageArray[index + 0x06f0] = 0;
				unicodeToAnsiArray[index + 0x06f0] = 63;
			}
			#endregion
		}
	}	
}
