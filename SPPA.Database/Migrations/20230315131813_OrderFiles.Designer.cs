// <auto-generated />
using System;
using SPPA.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SPPA.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230315131813_OrderFiles")]
    partial class OrderFiles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Attributes.ElementAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Editable")
                        .HasColumnType("boolean");

                    b.Property<string>("EnumSettings")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumberSettings")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId", "Name")
                        .IsUnique();

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Attributes.ElementAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("DateValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("uuid");

                    b.Property<string>("EnumValue")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ElementId");

                    b.HasIndex("OrderId", "ElementId", "AttributeId")
                        .IsUnique();

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.BomView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("OrderId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BomViews");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Elements.Element", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("IfcId")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("character(22)")
                        .IsFixedLength();

                    b.Property<Guid?>("IfcTeklaId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManufacturingStatus")
                        .HasColumnType("text");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PartType")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<string>("ProfileType")
                        .HasColumnType("text");

                    b.Property<string>("Queue")
                        .HasColumnType("text");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IfcId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RootId");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Files.OrderFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DrawingNumber")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("IfcFiles", (string)null);
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Files.OrderFileAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFileAttributes");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Files.OrderFileAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFileAttributeValues");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CustomFields")
                        .HasColumnType("jsonb");

                    b.Property<string>("Customer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Users.UserInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("UserEmail", "OrderId")
                        .IsUnique()
                        .HasFilter("\"WorkspaceId\" IS NULL");

                    b.HasIndex("UserEmail", "WorkspaceId")
                        .IsUnique()
                        .HasFilter("\"OrderId\" IS NULL");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("UserId", "OrderId")
                        .IsUnique()
                        .HasFilter("\"WorkspaceId\" IS NULL");

                    b.HasIndex("UserId", "WorkspaceId")
                        .IsUnique()
                        .HasFilter("\"OrderId\" IS NULL");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Attributes.ElementAttribute", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany("Attributes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Attributes.ElementAttributeValue", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Attributes.ElementAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPPA.Domain.Entities.Orders.Elements.Element", "Element")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Element");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.BomView", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPPA.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Elements.Element", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPPA.Domain.Entities.Orders.Elements.Element", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SPPA.Domain.Entities.Orders.Elements.Element", "Root")
                        .WithMany("AllChilds")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Order");

                    b.Navigation("Parent");

                    b.Navigation("Root");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Files.OrderFile", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderFiles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Files.OrderFileAttribute", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Files.OrderFileAttributeValue", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Files.OrderFileAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Orders")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Users.UserInvite", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany("Invites")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SPPA.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Invites")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Users.UserRole", b =>
                {
                    b.HasOne("SPPA.Domain.Entities.Orders.Order", "Order")
                        .WithMany("Roles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SPPA.Domain.Entities.Users.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPPA.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Roles")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Elements.Element", b =>
                {
                    b.Navigation("AllChilds");

                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Invites");

                    b.Navigation("OrderFiles");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SPPA.Domain.Entities.Workspace", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Orders");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
